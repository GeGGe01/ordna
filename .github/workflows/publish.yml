# .github/workflows/publish.yml
name: build-and-publish-apt
on:
  push:
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest   # <— fast pin till 24.04
    steps:
      - uses: actions/checkout@v4

      - name: Verify GPG secrets present
        run: |
          if [ -z "${{ secrets.GPG_PRIVATE_KEY }}" ] || [ -z "${{ secrets.GPG_PASSPHRASE }}" ]; then
            echo "GPG secrets missing. Set GPG_PRIVATE_KEY and GPG_PASSPHRASE in repository or org secrets." >&2
            exit 1
          fi

      - name: Install build + lint deps (24.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts debhelper dpkg-dev fakeroot build-essential \
            gnupg apt-utils shellcheck shfmt bats

      - name: Lint and test
        run: |
          make lint
          make test

      - name: Enforce formatting
        run: |
          make fmt
          # Fail release if formatting produced changes
          git diff --exit-code || (echo 'Formatting changes detected. Run `make fmt` locally and commit.' >&2; exit 1)

      - name: Build .deb
        run: |
          dpkg-buildpackage -us -uc -b
          mkdir -p publish/pool/main/o/ordna
          mv ../ordna_*_all.deb publish/pool/main/o/ordna/

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: ordna-deb
          path: publish/pool/main/o/ordna/*.deb
          if-no-files-found: error

      - name: Import GPG for signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE:  ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent

          # Import key: support ASCII-armored or base64-encoded content
          if echo "$GPG_PRIVATE_KEY" | grep -q "BEGIN PGP"; then
            printf '%s' "$GPG_PRIVATE_KEY" | gpg --batch --import
          else
            printf '%s' "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import
          fi

          # Extract fingerprint and export to later steps
          FPR=$(gpg --batch --with-colons --list-secret-keys | awk -F: '$1=="fpr" {print $10; exit}')
          if [ -z "${FPR:-}" ]; then
            echo "Failed to import GPG private key (no fingerprint found)" >&2
            exit 2
          fi
          echo "GPG_KEY_FPR=$FPR" >> "$GITHUB_ENV"
          gpg --list-secret-keys

      - name: Make APT metadata
        run: |
          cd publish
          touch .nojekyll
          mkdir -p dists/stable/main/binary-all
          apt-ftparchive packages pool > dists/stable/main/binary-all/Packages
          gzip -kf dists/stable/main/binary-all/Packages
          apt-ftparchive release dists/stable > dists/stable/Release

      - name: Sign Release / InRelease
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd publish/dists/stable
          gpg --batch --yes --pinentry-mode loopback \
              -u "$GPG_KEY_FPR" \
              --passphrase "$GPG_PASSPHRASE" \
              -abs -o Release.gpg Release
          gpg --batch --yes --pinentry-mode loopback \
              -u "$GPG_KEY_FPR" \
              --passphrase "$GPG_PASSPHRASE" \
              --clearsign -o InRelease Release
          cd ../../
          gpg --armor --export "$GPG_KEY_FPR" > ordna-archive-keyring.asc

      - name: Create landing page
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY##*/}"
          OWNER_LC="${OWNER,,}"
          REPO_LC="${REPO,,}"
          BASE_URL="https://${OWNER_LC}.github.io/${REPO_LC}"
          cat > publish/index.html <<HTML
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>ordna APT Repository</title>
          <style>
          body{font:16px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Helvetica,Arial,sans-serif;margin:2rem;max-width:48rem}
          code,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace}
          pre{background:#f6f8fa;padding:1rem;border-radius:8px;overflow:auto}
          a{color:#0366d6;text-decoration:none}
          h1{margin-bottom:.25rem}
          </style>
          <h1>ordna APT Repository</h1>
          <p>Install ordna from this repository on Ubuntu/Debian:</p>
          <pre><code>sudo install -d -m 0755 /etc/apt/keyrings
          curl -fsSL ${BASE_URL}/ordna-archive-keyring.asc | sudo tee /etc/apt/keyrings/ordna.asc >/dev/null
          echo "deb [signed-by=/etc/apt/keyrings/ordna.asc] ${BASE_URL} stable main" | sudo tee /etc/apt/sources.list.d/ordna.list >/dev/null
          sudo apt update
          sudo apt install ordna</code></pre>
          <p>Direct downloads:</p>
          <ul>
            <li><a href="pool/main/o/ordna/">Pool: .deb files</a></li>
            <li><a href="dists/stable/Release">Release</a> · <a href="dists/stable/InRelease">InRelease</a> · <a href="dists/stable/main/binary-all/Packages">Packages</a></li>
            <li><a href="ordna-archive-keyring.asc">GPG key</a></li>
          </ul>
          <p>Project: <a href="https://github.com/${OWNER}/${REPO}">github.com/${OWNER}/${REPO}</a></p>
          HTML

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: publish

  deploy:
    needs: build
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
